	set echo off;
--	=======================================================
--	remove invalid partial intersections

--	Partial intersections are generated by removing a prefix or suffix from a street
--	If the resulting "partial" street happens to be a valid street,
--	then the partial intersection is invalid

--	S Country Club,  S Country Club E, S Country Club W
--	Oates,  E Oates, W Oates
--	Apollo, E Apollo
--	=======================================================

	truncate table	gis_temp4	reuse storage;

--	truncate table	plan_table;
--	explain plan	set statement_id = 'a'		for

	insert into	non_partial_intersect

	select	addr_name, addr_type, 'P'
	from		trvehrcl
	where		addr_pfx > ' '
	and		(addr_name, addr_type)		in
	(
		select	addr_name, addr_type
		from		trvehrcl
		group by	addr_name, addr_type
		having	variance (decode (addr_pfx, 'N',1, 'S',1, 'E',2,'W',2, 0) ) > 0
	)

	union

	select	addr_name, addr_type, 'S'
	from		trvehrcl
	where		addr_sfx > ' '
	and		(addr_name, addr_type) in
	(
		select	addr_name, addr_type
		from		trvehrcl
		group by	addr_name, addr_type
		having	variance (decode (addr_sfx, 'N',1, 'S',1, 'E',2,'W',2, 0) ) > 0
	);

	analyze table	gis_temp4	compute statistics;


--	======================================================================
--	explain plan	set statement_id = 'b'	into garland.plan_table		for

--	delete from	intersection
--	where	 intersect_id		in
(
	select	intersect_id
--			,addr1_name ,addr2_name
--			,addr1_pfx  ,addr1_type ,addr1_sfx
--			,addr2_pfx  ,addr2_type ,addr2_sfx

	from		intersection		x,
			non_partial_intersect	p

	where		p.addr_name		= x.addr1_name
	and		p.addr_type		= x.addr1_type
	and		intersect_id	> 'F'
	and		p.is_pfx_sfx	= 'P'
	
	union

	select	intersect_id
--			,addr1_name ,addr2_name
--			,addr1_pfx  ,addr1_type ,addr1_sfx
--			,addr2_pfx  ,addr2_type ,addr2_sfx

	from		intersection		x,
			non_partial_intersect	p

	where		p.addr_name		= x.addr2_name
	and		p.addr_type		= x.addr2_type
	and		intersect_id	> 'F'
	and		p.is_pfx_sfx	= 'P'
	
	union

	select	intersect_id
--			,addr1_name ,addr2_name
--			,addr1_pfx  ,addr1_type ,addr1_sfx
--			,addr2_pfx  ,addr2_type ,addr2_sfx

	from		intersection		x,
			non_partial_intersect	p

	where		p.addr_name		= x.addr1_name
	and		p.addr_type		= x.addr1_type
	and		intersect_id	> 'F'
	and		p.is_pfx_sfx	= 'S'
	
	union

	select	intersect_id
--			,addr1_name ,addr2_name
--			,addr1_pfx  ,addr1_type ,addr1_sfx
--			,addr2_pfx  ,addr2_type ,addr2_sfx

	from		intersection		x,
			non_partial_intersect	p

	where		p.addr_name		= x.addr2_name
	and		p.addr_type		= x.addr2_type
	and		intersect_id	> 'F'
	and		p.is_pfx_sfx	= 'S'
	);


	set echo on;
--	======================================================================
--	select * from garland.explain_plan;
--	select * from garland.explain_analyze;
--	select * from garland.explain_indexed;
--	select * from garland.explain_constraint;
--	select * from garland.explain_table;
--	select * from garland.explain_index;
--	select * from garland.explain_cost;
--	select * from garland.explain_remote;
--	======================================================================
