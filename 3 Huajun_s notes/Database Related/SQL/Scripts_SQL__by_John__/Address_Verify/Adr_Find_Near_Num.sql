

CREATE OR REPLACE PROCEDURE	garland.ADR_SCAN_NEAR_NUM

			(JOB		IN OUT	ADR_VERIFY_ADDRESS.VERIFY_RECTYPE)

AS

--	=============================================================

	CURSOR	FIND_NEAR_NUMBER
		(
			USER_NAME		VARCHAR2,
			USER_NUM		NUMBER,
			USER_UNIT		VARCHAR2,
			USER_TYPE		VARCHAR2,
			USER_PFX		VARCHAR2,
			USER_SFX		VARCHAR2,
			USER_COUNT		NUMBER
		)
	IS

	SELECT	
--+	INDEX_DESC	(A CDRELADR_X_NAMNUM)		

			A.ADDR_NAME,
			NVL (A.ADDR_TYPE, ' ')		ADDR_TYPE,
			NVL (A.ADDR_PFX,  ' ')		ADDR_PFX,
			NVL (A.ADDR_SFX,  ' ')		ADDR_SFX,
			NVL (A.ADDR_NUM, 0000)		ADDR_NUM,
			NVL (A.UNIT_TYPE, ' ')		UNIT_TYPE,
			NVL (A.UNIT_NUM,  ' ')		UNIT_NUM

	FROM		garland.CDRELADR			A

	WHERE		A.ADDR_NAME =  USER_NAME

	AND		A.ADDR_NUM
	BETWEEN  	0000  AND  USER_NUM

	AND		USER_TYPE	IN (NVL (A.ADDR_TYPE, ' '), ' ')
	AND		USER_PFX	IN (NVL (A.ADDR_PFX,  ' '), ' ')
	AND		USER_SFX	IN (NVL (A.ADDR_SFX,  ' '), ' ')

	AND		A.ADDR_NUM IS NOT NULL
	AND		NVL (A.UNIT_NUM, ' ')  IN  (' ', USER_UNIT)
	AND		UPPER (NVL (RTRIM (A.ADDR_STATUS), ' ')) <> 'D'

	AND		ROWNUM	<= USER_COUNT

	UNION 

	SELECT	
--+	INDEX_ASC	(A CDRELADR_X_NAMNUM)		

			A.ADDR_NAME,
			NVL (A.ADDR_TYPE, ' ')		ADDR_TYPE,
			NVL (A.ADDR_PFX,  ' ')		ADDR_PFX,
			NVL (A.ADDR_SFX,  ' ')		ADDR_SFX,
			NVL (A.ADDR_NUM, 0000)		ADDR_NUM,
			NVL (A.UNIT_TYPE, ' ')		UNIT_TYPE,
			NVL (A.UNIT_NUM,  ' ')		UNIT_NUM

	FROM		garland.CDRELADR		A

	WHERE		A.ADDR_NAME	=  USER_NAME

	AND		A.ADDR_NUM
	BETWEEN	USER_NUM  AND  99999

	AND		USER_TYPE	IN (NVL (A.ADDR_TYPE, ' '), ' ')
	AND		USER_PFX	IN (NVL (A.ADDR_PFX,  ' '), ' ')
	AND		USER_SFX	IN (NVL (A.ADDR_SFX,  ' '), ' ')

	AND		A.ADDR_NUM IS NOT NULL
	AND		NVL (A.UNIT_NUM, ' ')  IN  (' ', USER_UNIT)
	AND		UPPER (NVL (RTRIM (A.ADDR_STATUS), ' ')) <> 'D'

	AND		ROWNUM	<= USER_COUNT

	order by	addr_name, addr_type, addr_pfx, addr_sfx, addr_num, unit_type, unit_num;


--	=================================================================================

		KEEP_TYPE		VARCHAR2(04);
		KEEP_PFX		VARCHAR2(02);
		KEEP_SFX		VARCHAR2(02);

		TEST_COUNT		NUMBER		:= 0;


--	=================================================================================

BEGIN

--IF DEBUG_SEQ < DEBUG_MAX  THEN DEBUG_SEQ := DEBUG_SEQ + 01;  
--INSERT INTO ADRDEBUG VALUES ( 'AV/NEAR NUMB/BEGIN','ADDR1',LPAD (JOB.ADDR1_NUM,04)||';'||RPAD(JOB.ADDR1_PFX,02)||';'||RPAD (JOB.ADDR1_NAME,20)||';'||RPAD(JOB.ADDR1_TYPE,04)||';'||RPAD(JOB.ADDR1_SFX,02)
--,DEBUG_SESSION, ADRDEBUG_SEQ.NEXTVAL); ELS--IF DEBUG_MAX > 0  THEN RAISE EXCP_DEBUG_MAX;	END IF;


		IF	NVL (JOB.PASS_NEAR_COUNT, 0) <= 0				THEN
			JOB.PASS_NEAR_COUNT	:= ADR_VERIFY.RULE_NEAR_SIZE;
		END IF;

		JOB.PASS_NEAR_COUNT	:= JOB.PASS_NEAR_COUNT + (ADR_VERIFY.RULE_NEAR_SIZE * NVL (JOB.PASS_MORE_LESS, 0));



		IF	JOB.STREET_COUNT = 01					THEN
			KEEP_TYPE			:= JOB.ADDR1_TYPE;
			KEEP_PFX			:= JOB.ADDR1_PFX;
			KEEP_SFX			:= JOB.ADDR1_SFX;
		ELSE
			KEEP_TYPE			:= ' ';
			KEEP_PFX			:= ' ';
			KEEP_SFX			:= ' ';
		END IF;



		JOB.FETCH_COUNT	 	:= 0;
		JOB.MATCH_COUNT	 	:= 0;
		JOB.SAVE_ROWS		:= 0;
		JOB.OPTION_COUNT 		:= JOB.OPTION_START;

	
		FOR LOOK	IN 	FIND_NEAR_NUMBER				 
				(
					JOB.ADDR1_NAME,
					JOB.ADDR1_NUM,
					JOB.ADDR1_UNIT_NUM1,
					KEEP_TYPE,
					KEEP_PFX,
					KEEP_SFX,
					JOB.PASS_NEAR_COUNT
				)
		LOOP

			JOB.FETCH_COUNT		:= JOB.FETCH_COUNT + 01;

			JOB.ADDR3_NAME		:= LOOK.ADDR_NAME;
			JOB.ADDR3_TYPE		:= LOOK.ADDR_TYPE;
			JOB.ADDR3_PFX		:= LOOK.ADDR_PFX;
			JOB.ADDR3_SFX		:= LOOK.ADDR_SFX;
			JOB.ADDR3_NUM		:= NVL (LOOK.ADDR_NUM, 0);
			JOB.ADDR3_UNIT_TYPE	:= LOOK.UNIT_TYPE;
			JOB.ADDR3_UNIT_NUM1	:= LOOK.UNIT_NUM;
			ADR_VERIFY_ADDRESS.BUILD_OPTION_TEXT (JOB);		--	PROCEDURE	--


		END LOOP;	



EXCEPTION

WHEN	OTHERS	THEN	
DEBUG_SQLCODE := SQLCODE;
DEBUG_SQLERRM := RPAD (SQLERRM, 80);
--INSERT INTO ADRDEBUG VALUES ('AV/NEAR NUMB ERROR' ,DEBUG_SQLCODE, DEBUG_SQLERRM, DEBUG_SEQ, ADRDEBUG_SEQ.NEXTVAL); 
NULL;


END	ADR_SCAN_NEAR_NUM;

--	===================================================================
